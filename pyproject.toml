# ─────────────────────────── Build backend ────────────────────────────
[build-system]
requires = ["setuptools>=69", "wheel", "setuptools_scm[toml]>=8.0"]
build-backend = "setuptools.build_meta"

# ───────────────────────────── Metadata ───────────────────────────────
[project]
name            = "pmarlo"
description     = "Protein Markov State Model Analysis with Replica Exchange"
readme          = "README.md"
requires-python = ">=3.11,<3.14"
license = { file = "LICENSE" }


authors = [
  { name = "PMARLO Development Team", email="konrad.jan.gorzelanczyk@gmail.com" },
]
keywords = [
  "molecular dynamics",
  "markov state models",
  "replica exchange",
  "protein simulation",
  "biophysics",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
]
dynamic = ["version"]            # ostateczną wersję dostarcza setuptools-scm

dependencies = [
  "numpy>=1.24,<2.4",
  "scipy>=1.10,<2.0",
  "pandas>=1.5,<3.0",
  "mdtraj>=1.9,<2.0",
  "openmm>=8.1,<9.0",
  "rdkit>=2024.03.1,<2025.0",
  "psutil>=5.9,<6.1",
  "pygount>=2.6,<3.2",
]

# ─────────────────────── Optional runtime extras ──────────────────────

[project.optional-dependencies]
mlcv = ["torch>=2.2", "mlcolvar>=1.2", "deeptime>=0.4.5,<0.5"]
app = ["streamlit>=1.31", "plotly>=5.15", "matplotlib>=3.8"]
analysis = ["scikit-learn>=1.2,<2.0", "matplotlib>=3.8", "deeptime>=0.4.5,<0.5"]
fixer = ["pdbfixer>=1.9; python_version < '3.12'", "black>=25.0", "isort>=5.10.1", "ruff>=0.5"]
all = ["torch>=2.2", "mlcolvar>=1.2", "deeptime>=0.4.5,<0.5", "streamlit>=1.31", "plotly>=5.15", "matplotlib>=3.8", "scikit-learn>=1.2,<2.0", "pdbfixer>=1.9; python_version < '3.12'", "black>=25.0", "isort>=5.10.1", "ruff>=0.5"]

# ───────────────────── URLs & entry-points / CLI ──────────────────────
[project.urls]
Homepage      = "https://github.com/Komputerowe-Projektowanie-Lekow/pmarlo"
Issues = "https://github.com/Komputerowe-Projektowanie-Lekow/pmarlo/issues"


[project.scripts]
pmarlo = "pmarlo.main:main"
pmarlo-check-extras = "pmarlo.devtools.check_extras_parity:main"
pmarlo-lines-report = "pmarlo.devtools.lines_report:main"

# ─────────────────────────── setuptools-scm ───────────────────────────
[tool.setuptools_scm]
write_to = "src/pmarlo/_version.py"
local_scheme = "no-local-version"
fallback_version = "0.0.0"

# ──────────────────── Package discovery & data files ──────────────────
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"pmarlo" = ["py.typed", "*.md", "**/*.yml", "**/*.yaml"]

# ────────────────────────── Dev-tooling groups ────────────────────────
[tool.poetry]
packages = [{include = "pmarlo", from = "src"}]
version = "0.0.0"  # placeholder for Poetry; real version comes from setuptools-scm

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
# Optional dependencies (enabled via extras)
matplotlib = {version = ">=3.8", optional = true}
plotly = {version = ">=5.15", optional = true}
streamlit = {version = ">=1.31", optional = true}
scikit-learn = {version = ">=1.2,<2.0", optional = true}
deeptime = {version = ">=0.4.5,<0.5", optional = true}
torch = {version = ">=2.2,<3.0", optional = true, source = "pytorch-cpu"}
mlcolvar = {version = ">=1.2", optional = true}
pdbfixer = {version = ">=1.9", optional = true, markers = "python_version < '3.12'"}
black = {version = ">=25.0", optional = true}
isort = {version = ">=5.10.1", optional = true}
ruff = {version = ">=0.5", optional = true}

# Keep these extras in sync with [project.optional-dependencies]
[tool.poetry.extras]
mlcv = ["torch", "mlcolvar", "deeptime"]
app = ["streamlit", "plotly", "matplotlib"]
analysis = ["scikit-learn", "matplotlib", "deeptime"]
fixer = ["pdbfixer", "black", "isort", "ruff"]
all = ["torch", "mlcolvar", "deeptime", "streamlit", "plotly", "matplotlib", "scikit-learn", "pdbfixer", "black", "isort", "ruff"]

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7"
mypy = "^1.11"

[tool.poetry.group.tests.dependencies]
pytest = "^8.2"
pytest-xdist = "^3.5"
pytest-randomly = "^3.15"
pytest-testmon = "^2.1"
pytest-picked = "^0.5"
tox = "^4.14"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.3"
sphinx-rtd-theme = "^2.0"

# ───────────────────────── Formatting & linting ───────────────────────
[tool.black]
line-length    = 88
target-version = ["py311", "py312"]
include        = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile            = "black"
line_length        = 88
multi_line_output  = 3
known_first_party  = ["pmarlo"]

[tool.mypy]
python_version = "3.11"
explicit_package_bases = true
packages               = ["pmarlo"]
ignore_missing_imports = true

# Tymczasowo WYŁĄCZAMY ostrzejsze reguły
disallow_untyped_defs    = false          # włączaj stopniowo per-moduł
warn_return_any          = true           # zostawione – wyróżnia .any
warn_unused_configs      = true
# no_implicit_optional   = false          # zostaw domyślne

[[tool.mypy.overrides]]
module = ["rdkit.*", "rdkit-stubs.*"]
ignore_errors = true

[[tool.mypy.overrides]]
# Tymczasowe wyciszenie błędów typów w wybranych modułach projektu,
# aby odblokować zielone "tox -e type"; docelowo usuniemy te wpisy po refaktorze.
module = [
  "pmarlo.transform.pipeline",
  "pmarlo.markov_state_model.enhanced_msm",
  "pmarlo.experiments.simulation",
  "pmarlo.main",
]
ignore_errors = true

# ────────────────────────── Pytest defaults ───────────────────────────
[tool.pytest.ini_options]
testpaths = ["tests/unit", "tests/devtools"]
addopts = "-q -ra --strict-markers --maxfail=1"
norecursedirs = ["_assets", "_output", "_checkpoints", ".benchmarks", ".pytest_cache"]
markers = [
  "unit: fast, isolated tests",
  "integration: slow, cross-module tests",
  "perf: performance/benchmark tests",
  "slow: heavy tests within unit or integration",
  "data: tests for src/data",
  "io: tests for src/io",
  "features: tests for src/features",
  "cv: tests for collective variable pipelines",
  "reduce: tests for src/reduce / FES math",
  "results: tests for API/result objects (FES, etc.)",
  "transform: tests for src/transform",
  "demux: tests for src/demultiplexing",
  "msm: tests for src/markov_state_model",
  "replica: tests for src/replica_exchange (REMD)",
  "experiments: tests for src/experiments",
  "protein: tests for src/protein",
  "reporting: tests for src/reporting",
  "workflow: tests for src/workflow",
  "utils: tests for src/utils"
]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]


[tool.scriv]
message_template = "### {version}\n\n{sections}"
format = "md"
changelog = "CHANGELOG.md"
fragment_directory = "changelog.d"
version = "literal"
