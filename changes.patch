diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 72a637524c6a3e4b9d0037e4a54065c9f60d3175..b6e4267d1afc3ae3e401eb223a05d28681dde321 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,15 +1,16 @@
 1. ## General developer notes
 2. 
 3. Install Poetry & run `poetry install --with dev`.
 2. Run `pre-commit install` once.
 3. Make changes; all hooks should pass before pushing.
 
 
 ## Developer utilities
-We ship a couple of helper commands via the ``pmarlo.devtools`` package.
+Helper scripts now live in the top-level ``tools`` package and are executed
+directly with Python. They are not part of the distributed ``pmarlo`` package.
 
-* ``poetry run pmarlo-check-extras`` verifies that the optional dependency
+* ``python -m tools.check_extras_parity`` verifies that the optional dependency
   groups declared in ``[project.optional-dependencies]`` stay in sync with
   ``[tool.poetry.extras]``.
-* ``poetry run pmarlo-lines-report`` generates the language statistics report
-  that previously lived in ``utilities/lines.py``.
+* ``python -m tools.lines_report`` generates the language statistics report
+  based on ``pygount`` statistics.
diff --git a/pyproject.toml b/pyproject.toml
index a7315470e73d96ffe5330612d52bdbafeae8e1fe..92cd56c9d7231a279d4733e739a862af26f0ab7c 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -41,52 +41,50 @@ dependencies = [
   "pandas>=1.5,<3.0",
   "mdtraj>=1.9,<2.0",
   "openmm>=8.1,<9.0",
   "rdkit>=2024.03.1,<2025.0",
   "psutil>=5.9,<6.1",
   "pygount>=2.6,<3.2",
 ]
 
 # ─────────────────────── Optional runtime extras ──────────────────────
 
 [project.optional-dependencies]
 mlcv = ["torch>=2.2", "mlcolvar>=1.2", "deeptime>=0.4.5,<0.5"]
 app = ["streamlit>=1.31", "plotly>=5.15", "matplotlib>=3.8"]
 analysis = ["scikit-learn>=1.2,<2.0", "matplotlib>=3.8", "deeptime>=0.4.5,<0.5"]
 fixer = ["pdbfixer>=1.9; python_version < '3.12'", "black>=25.0", "isort>=5.10.1", "ruff>=0.5"]
 all = ["torch>=2.2", "mlcolvar>=1.2", "deeptime>=0.4.5,<0.5", "streamlit>=1.31", "plotly>=5.15", "matplotlib>=3.8", "scikit-learn>=1.2,<2.0", "pdbfixer>=1.9; python_version < '3.12'", "black>=25.0", "isort>=5.10.1", "ruff>=0.5"]
 
 # ───────────────────── URLs & entry-points / CLI ──────────────────────
 [project.urls]
 Homepage      = "https://github.com/Komputerowe-Projektowanie-Lekow/pmarlo"
 Issues = "https://github.com/Komputerowe-Projektowanie-Lekow/pmarlo/issues"
 
 
 [project.scripts]
 pmarlo = "pmarlo.main:main"
-pmarlo-check-extras = "pmarlo.devtools.check_extras_parity:main"
-pmarlo-lines-report = "pmarlo.devtools.lines_report:main"
 
 # ─────────────────────────── setuptools-scm ───────────────────────────
 [tool.setuptools_scm]
 write_to = "src/pmarlo/_version.py"
 local_scheme = "no-local-version"
 fallback_version = "0.0.0"
 
 # ──────────────────── Package discovery & data files ──────────────────
 [tool.setuptools.packages.find]
 where = ["src"]
 
 [tool.setuptools.package-dir]
 "" = "src"
 
 [tool.setuptools.package-data]
 "pmarlo" = ["py.typed", "*.md", "**/*.yml", "**/*.yaml"]
 
 # ────────────────────────── Dev-tooling groups ────────────────────────
 [tool.poetry]
 packages = [{include = "pmarlo", from = "src"}]
 version = "0.0.0"  # placeholder for Poetry; real version comes from setuptools-scm
 
 [[tool.poetry.source]]
 name = "pytorch-cpu"
 url = "https://download.pytorch.org/whl/cpu"
diff --git a/src/pmarlo/devtools/__init__.py b/src/pmarlo/devtools/__init__.py
deleted file mode 100644
index 74ae027efccd6a2641f91397b146cd78fa3d9c3c..0000000000000000000000000000000000000000
--- a/src/pmarlo/devtools/__init__.py
+++ /dev/null
@@ -1,14 +0,0 @@
-"""Developer-facing utilities and thin CLI entry points.
-
-This package hosts helper functions that are useful while maintaining
-:mod:`pmarlo`. Core logic lives here, while the corresponding console
-scripts are declared in :mod:`pyproject.toml` and keep their command-line
-interfaces minimal.
-"""
-
-from __future__ import annotations
-
-from . import lines_report
-from .check_extras_parity import check_extras_parity
-
-__all__ = ["check_extras_parity", "lines_report"]
diff --git a/src/pmarlo/devtools/check_extras_parity.py b/src/pmarlo/devtools/check_extras_parity.py
deleted file mode 100644
index fbc218d92d09891a1b53032519df327d802af595..0000000000000000000000000000000000000000
--- a/src/pmarlo/devtools/check_extras_parity.py
+++ /dev/null
@@ -1,131 +0,0 @@
-"""Parity checks between Poetry extras and PEP 621 optional dependencies."""
-
-from __future__ import annotations
-
-import argparse
-from pathlib import Path
-from typing import Iterable, Sequence
-
-import tomllib
-
-
-class ExtrasParityError(RuntimeError):
-    """Raised when the ``pyproject.toml`` file cannot be processed."""
-
-
-def _load_pyproject(path: Path) -> dict:
-    try:
-        data = tomllib.loads(path.read_text(encoding="utf-8"))
-    except FileNotFoundError as exc:  # pragma: no cover - handled by caller
-        raise ExtrasParityError(f"Could not find pyproject file at {path!s}.") from exc
-    except OSError as exc:  # pragma: no cover - filesystem issues are rare
-        raise ExtrasParityError(f"Could not read {path!s}: {exc}.") from exc
-    except tomllib.TOMLDecodeError as exc:
-        raise ExtrasParityError(f"Failed to parse {path!s}: {exc}.") from exc
-    if not isinstance(data, dict):
-        raise ExtrasParityError(
-            "Parsed pyproject data is not a table; expected a dictionary structure."
-        )
-    return data
-
-
-def _extract_extra_names(section: object) -> set[str]:
-    if section is None:
-        return set()
-    if not isinstance(section, dict):
-        raise ExtrasParityError(
-            "Extras definitions must be provided as mappings of extra name to dependencies."
-        )
-    return {
-        key
-        for key, value in section.items()
-        if isinstance(key, str) and value is not None
-    }
-
-
-def _describe_missing(
-    extras: Iterable[str], origin: str, counterpart: str
-) -> list[str]:
-    missing = sorted(set(extras))
-    if not missing:
-        return []
-    if len(missing) == 1:
-        return [
-            f"Extra '{missing[0]}' is declared in {origin} but missing from {counterpart}."
-        ]
-    return [
-        f"Extras {', '.join(sorted(missing))} are declared in {origin} but missing from {counterpart}."
-    ]
-
-
-def check_extras_parity(
-    pyproject_path: str = "pyproject.toml",
-) -> tuple[bool, list[str]]:
-    """Compare extra names declared for Poetry and PEP 621 metadata."""
-
-    path = Path(pyproject_path)
-    try:
-        data = _load_pyproject(path)
-    except ExtrasParityError as exc:
-        return False, [str(exc)]
-
-    project_optional = (
-        data.get("project", {}).get("optional-dependencies")
-        if isinstance(data.get("project"), dict)
-        else {}
-    )
-    poetry_extras = (
-        data.get("tool", {}).get("poetry", {}).get("extras")
-        if isinstance(data.get("tool"), dict)
-        else {}
-    )
-
-    try:
-        project_extra_names = _extract_extra_names(project_optional)
-        poetry_extra_names = _extract_extra_names(poetry_extras)
-    except ExtrasParityError as exc:
-        return False, [str(exc)]
-
-    problems: list[str] = []
-    problems.extend(
-        _describe_missing(
-            project_extra_names - poetry_extra_names,
-            "[project.optional-dependencies]",
-            "[tool.poetry.extras]",
-        )
-    )
-    problems.extend(
-        _describe_missing(
-            poetry_extra_names - project_extra_names,
-            "[tool.poetry.extras]",
-            "[project.optional-dependencies]",
-        )
-    )
-
-    ok = not problems
-    return ok, problems
-
-
-def _format_report(ok: bool, problems: Sequence[str]) -> str:
-    if ok:
-        return "Extras definitions are in parity between Poetry and PEP 621 metadata."
-    bullet_list = "\n".join(f" - {problem}" for problem in problems)
-    return "Extras parity check failed:\n" + bullet_list
-
-
-def main(argv: Sequence[str] | None = None) -> int:
-    parser = argparse.ArgumentParser(description=__doc__)
-    parser.add_argument(
-        "--pyproject",
-        default="pyproject.toml",
-        help="Path to the pyproject.toml file to inspect (default: %(default)s).",
-    )
-    args = parser.parse_args(argv)
-
-    ok, problems = check_extras_parity(args.pyproject)
-    print(_format_report(ok, problems))
-    return 0 if ok else 1
-
-
-if __name__ == "__main__":  # pragma: no cover - manual invocation only
-    raise SystemExit(main())
diff --git a/tests/devtools/test_check_extras_parity.py b/tests/devtools/test_check_extras_parity.py
index 19a31c5d3f2eeb6d443a8e41518aec378761ffcf..5794061abf6c2d71d660124e32c0261fed21c270 100644
--- a/tests/devtools/test_check_extras_parity.py
+++ b/tests/devtools/test_check_extras_parity.py
@@ -1,30 +1,30 @@
 from __future__ import annotations
 
 from pathlib import Path
 
-from pmarlo.devtools.check_extras_parity import check_extras_parity
+from tools.check_extras_parity import check_extras_parity
 
 
 def write_pyproject(tmp_path: Path, content: str) -> Path:
     path = tmp_path / "pyproject.toml"
     path.write_text(content, encoding="utf-8")
     return path
 
 
 def test_perfect_parity(tmp_path: Path) -> None:
     path = write_pyproject(
         tmp_path,
         """
 [project]
 optional-dependencies = {test = ["pytest"]}
 
 [tool.poetry]
 extras = {test = ["pytest"]}
 """,
     )
 
     ok, problems = check_extras_parity(str(path))
 
     assert ok is True
     assert problems == []
 
diff --git a/tests/devtools/test_lines_report.py b/tests/devtools/test_lines_report.py
index 51eb925541232353cfbf712b952982c1e3b643a2..45f8caf358ddb707c8d1cd6cb2c0c680749692c5 100644
--- a/tests/devtools/test_lines_report.py
+++ b/tests/devtools/test_lines_report.py
@@ -1,33 +1,33 @@
 from __future__ import annotations
 
 from pathlib import Path
 from typing import Mapping
 
 import pytest
 
-from pmarlo.devtools.lines_report import (
+from tools.lines_report import (
     FolderSummary,
     LangTotals,
     build_language_rows,
     collect_language_statistics,
     format_folder_summary,
     format_table,
     generate_report,
 )
 
 
 @pytest.fixture()
 def fake_runner() -> dict[str, Mapping[str, object]]:
     def runner(path: Path, suffixes: tuple[str, ...] | None) -> Mapping[str, object]:
         return {
             "summary": {
                 "totalFileCount": 1,
                 "totalCodeCount": 10,
                 "totalDocumentationCount": 3,
             },
             "languages": [
                 {
                     "language": f"lang-{path.name}",
                     "fileCount": 1,
                     "codeCount": 10,
                     "documentationCount": 3,
diff --git a/tools/check_extras_parity.py b/tools/check_extras_parity.py
index f3b9c348339980856ad7a449294d95deade7109c..fbc218d92d09891a1b53032519df327d802af595 100644
--- a/tools/check_extras_parity.py
+++ b/tools/check_extras_parity.py
@@ -1,23 +1,131 @@
-"""Legacy shim that forwards to :mod:`pmarlo.devtools.check_extras_parity`."""
+"""Parity checks between Poetry extras and PEP 621 optional dependencies."""
 
 from __future__ import annotations
 
-import warnings
+import argparse
+from pathlib import Path
+from typing import Iterable, Sequence
 
-from pmarlo.devtools.check_extras_parity import main as _main
+import tomllib
 
-_DEPRECATION_MESSAGE = (
-    "tools/check_extras_parity.py is deprecated; use the 'pmarlo-check-extras'"
-    " console script instead."
-)
 
+class ExtrasParityError(RuntimeError):
+    """Raised when the ``pyproject.toml`` file cannot be processed."""
 
-def main() -> int:
-    """Execute the modern parity checker while emitting a deprecation warning."""
 
-    warnings.warn(_DEPRECATION_MESSAGE, DeprecationWarning, stacklevel=2)
-    return _main()
+def _load_pyproject(path: Path) -> dict:
+    try:
+        data = tomllib.loads(path.read_text(encoding="utf-8"))
+    except FileNotFoundError as exc:  # pragma: no cover - handled by caller
+        raise ExtrasParityError(f"Could not find pyproject file at {path!s}.") from exc
+    except OSError as exc:  # pragma: no cover - filesystem issues are rare
+        raise ExtrasParityError(f"Could not read {path!s}: {exc}.") from exc
+    except tomllib.TOMLDecodeError as exc:
+        raise ExtrasParityError(f"Failed to parse {path!s}: {exc}.") from exc
+    if not isinstance(data, dict):
+        raise ExtrasParityError(
+            "Parsed pyproject data is not a table; expected a dictionary structure."
+        )
+    return data
 
 
-if __name__ == "__main__":  # pragma: no cover - compatibility shim
+def _extract_extra_names(section: object) -> set[str]:
+    if section is None:
+        return set()
+    if not isinstance(section, dict):
+        raise ExtrasParityError(
+            "Extras definitions must be provided as mappings of extra name to dependencies."
+        )
+    return {
+        key
+        for key, value in section.items()
+        if isinstance(key, str) and value is not None
+    }
+
+
+def _describe_missing(
+    extras: Iterable[str], origin: str, counterpart: str
+) -> list[str]:
+    missing = sorted(set(extras))
+    if not missing:
+        return []
+    if len(missing) == 1:
+        return [
+            f"Extra '{missing[0]}' is declared in {origin} but missing from {counterpart}."
+        ]
+    return [
+        f"Extras {', '.join(sorted(missing))} are declared in {origin} but missing from {counterpart}."
+    ]
+
+
+def check_extras_parity(
+    pyproject_path: str = "pyproject.toml",
+) -> tuple[bool, list[str]]:
+    """Compare extra names declared for Poetry and PEP 621 metadata."""
+
+    path = Path(pyproject_path)
+    try:
+        data = _load_pyproject(path)
+    except ExtrasParityError as exc:
+        return False, [str(exc)]
+
+    project_optional = (
+        data.get("project", {}).get("optional-dependencies")
+        if isinstance(data.get("project"), dict)
+        else {}
+    )
+    poetry_extras = (
+        data.get("tool", {}).get("poetry", {}).get("extras")
+        if isinstance(data.get("tool"), dict)
+        else {}
+    )
+
+    try:
+        project_extra_names = _extract_extra_names(project_optional)
+        poetry_extra_names = _extract_extra_names(poetry_extras)
+    except ExtrasParityError as exc:
+        return False, [str(exc)]
+
+    problems: list[str] = []
+    problems.extend(
+        _describe_missing(
+            project_extra_names - poetry_extra_names,
+            "[project.optional-dependencies]",
+            "[tool.poetry.extras]",
+        )
+    )
+    problems.extend(
+        _describe_missing(
+            poetry_extra_names - project_extra_names,
+            "[tool.poetry.extras]",
+            "[project.optional-dependencies]",
+        )
+    )
+
+    ok = not problems
+    return ok, problems
+
+
+def _format_report(ok: bool, problems: Sequence[str]) -> str:
+    if ok:
+        return "Extras definitions are in parity between Poetry and PEP 621 metadata."
+    bullet_list = "\n".join(f" - {problem}" for problem in problems)
+    return "Extras parity check failed:\n" + bullet_list
+
+
+def main(argv: Sequence[str] | None = None) -> int:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument(
+        "--pyproject",
+        default="pyproject.toml",
+        help="Path to the pyproject.toml file to inspect (default: %(default)s).",
+    )
+    args = parser.parse_args(argv)
+
+    ok, problems = check_extras_parity(args.pyproject)
+    print(_format_report(ok, problems))
+    return 0 if ok else 1
+
+
+if __name__ == "__main__":  # pragma: no cover - manual invocation only
     raise SystemExit(main())
diff --git a/src/pmarlo/devtools/lines_report.py b/tools/lines_report.py
similarity index 99%
rename from src/pmarlo/devtools/lines_report.py
rename to tools/lines_report.py
index bce44ffa25332733693fa38d639a6efcc019d28f..2c248978e20243fc9d1d8fe42a15c60b9e02459b 100644
--- a/src/pmarlo/devtools/lines_report.py
+++ b/tools/lines_report.py
@@ -240,50 +240,50 @@ def generate_report(
 
 def _parse_args(argv: Sequence[str] | None = None) -> argparse.Namespace:
     parser = argparse.ArgumentParser(description=__doc__)
     parser.add_argument(
         "paths",
         nargs="*",
         type=Path,
         default=DEFAULT_FOLDERS,
         help="Folders to scan (default: tests src example_programs).",
     )
     parser.add_argument(
         "--suffix",
         action="append",
         dest="suffixes",
         help="Restrict pygount to the given suffix (can be provided multiple times).",
     )
     parser.add_argument(
         "--all-suffixes",
         action="store_true",
         help="Disable suffix filtering and scan all files that pygount supports.",
     )
     return parser.parse_args(argv)
 
 
 def main(argv: Sequence[str] | None = None) -> int:
-    """Entry point used by the ``pmarlo-lines-report`` console script."""
+    """Entry point for command-line usage of the lines report tool."""
 
     args = _parse_args(argv)
     suffixes: Sequence[str] | None
     if args.all_suffixes:
         suffixes = None
     elif args.suffixes:
         suffixes = args.suffixes
     else:
         suffixes = DEFAULT_SUFFIXES
 
     try:
         report = generate_report(args.paths, suffixes=suffixes)
     except PygountError as exc:
         print(str(exc))
         return 1
 
     for path in args.paths:
         print(f"Analiza folderu: {path}")
     print("\n" + report)
     return 0
 
 
 if __name__ == "__main__":  # pragma: no cover - manual invocation only
     raise SystemExit(main())
diff --git a/utilities/lines.py b/utilities/lines.py
deleted file mode 100644
index 98eaa14d19433a3a78f2b63c03fcd8c7eafcf70a..0000000000000000000000000000000000000000
--- a/utilities/lines.py
+++ /dev/null
@@ -1,23 +0,0 @@
-"""Legacy shim that forwards to :mod:`pmarlo.devtools.lines_report`."""
-
-from __future__ import annotations
-
-import warnings
-
-from pmarlo.devtools.lines_report import main as _main
-
-_DEPRECATION_MESSAGE = (
-    "utilities/lines.py is deprecated; use the 'pmarlo-lines-report' console"
-    " script instead."
-)
-
-
-def main() -> int:
-    """Execute the modern lines report while emitting a deprecation warning."""
-
-    warnings.warn(_DEPRECATION_MESSAGE, DeprecationWarning, stacklevel=2)
-    return _main()
-
-
-if __name__ == "__main__":  # pragma: no cover - compatibility shim
-    raise SystemExit(main())
